// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		admin.proto
		data.proto
		meta.proto

	It has these top-level messages:
		ShardSnapshotRequest
		ShardSnapshotResponse
		ShardRestoreRequest
		ShardRestoreResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardSnapshotRequest struct {
	Database        string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	RetentionPolicy string `protobuf:"bytes,2,opt,name=retentionPolicy,proto3" json:"retentionPolicy,omitempty"`
	ShardID         uint64 `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Since           int64  `protobuf:"varint,4,opt,name=since,proto3" json:"since,omitempty"`
}

func (m *ShardSnapshotRequest) Reset()                    { *m = ShardSnapshotRequest{} }
func (m *ShardSnapshotRequest) String() string            { return proto1.CompactTextString(m) }
func (*ShardSnapshotRequest) ProtoMessage()               {}
func (*ShardSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{0} }

func (m *ShardSnapshotRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *ShardSnapshotRequest) GetRetentionPolicy() string {
	if m != nil {
		return m.RetentionPolicy
	}
	return ""
}

func (m *ShardSnapshotRequest) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *ShardSnapshotRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

type ShardSnapshotResponse struct {
	FileBlock []byte `protobuf:"bytes,1,opt,name=fileBlock,proto3" json:"fileBlock,omitempty"`
}

func (m *ShardSnapshotResponse) Reset()                    { *m = ShardSnapshotResponse{} }
func (m *ShardSnapshotResponse) String() string            { return proto1.CompactTextString(m) }
func (*ShardSnapshotResponse) ProtoMessage()               {}
func (*ShardSnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{1} }

func (m *ShardSnapshotResponse) GetFileBlock() []byte {
	if m != nil {
		return m.FileBlock
	}
	return nil
}

type ShardRestoreRequest struct {
	Database        string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	RetentionPolicy string `protobuf:"bytes,2,opt,name=retentionPolicy,proto3" json:"retentionPolicy,omitempty"`
	ShardID         uint64 `protobuf:"varint,3,opt,name=shardID,proto3" json:"shardID,omitempty"`
}

func (m *ShardRestoreRequest) Reset()                    { *m = ShardRestoreRequest{} }
func (m *ShardRestoreRequest) String() string            { return proto1.CompactTextString(m) }
func (*ShardRestoreRequest) ProtoMessage()               {}
func (*ShardRestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{2} }

func (m *ShardRestoreRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *ShardRestoreRequest) GetRetentionPolicy() string {
	if m != nil {
		return m.RetentionPolicy
	}
	return ""
}

func (m *ShardRestoreRequest) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

type ShardRestoreResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ShardRestoreResponse) Reset()                    { *m = ShardRestoreResponse{} }
func (m *ShardRestoreResponse) String() string            { return proto1.CompactTextString(m) }
func (*ShardRestoreResponse) ProtoMessage()               {}
func (*ShardRestoreResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{3} }

func (m *ShardRestoreResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ShardRestoreResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*ShardSnapshotRequest)(nil), "proto.ShardSnapshotRequest")
	proto1.RegisterType((*ShardSnapshotResponse)(nil), "proto.ShardSnapshotResponse")
	proto1.RegisterType((*ShardRestoreRequest)(nil), "proto.ShardRestoreRequest")
	proto1.RegisterType((*ShardRestoreResponse)(nil), "proto.ShardRestoreResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RestoreService service

type RestoreServiceClient interface {
	ShardBackup(ctx context.Context, in *ShardSnapshotRequest, opts ...grpc.CallOption) (RestoreService_ShardBackupClient, error)
	ShardRestore(ctx context.Context, in *ShardRestoreRequest, opts ...grpc.CallOption) (*ShardRestoreResponse, error)
}

type restoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewRestoreServiceClient(cc *grpc.ClientConn) RestoreServiceClient {
	return &restoreServiceClient{cc}
}

func (c *restoreServiceClient) ShardBackup(ctx context.Context, in *ShardSnapshotRequest, opts ...grpc.CallOption) (RestoreService_ShardBackupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RestoreService_serviceDesc.Streams[0], c.cc, "/proto.RestoreService/shardBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &restoreServiceShardBackupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestoreService_ShardBackupClient interface {
	Recv() (*ShardSnapshotResponse, error)
	grpc.ClientStream
}

type restoreServiceShardBackupClient struct {
	grpc.ClientStream
}

func (x *restoreServiceShardBackupClient) Recv() (*ShardSnapshotResponse, error) {
	m := new(ShardSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restoreServiceClient) ShardRestore(ctx context.Context, in *ShardRestoreRequest, opts ...grpc.CallOption) (*ShardRestoreResponse, error) {
	out := new(ShardRestoreResponse)
	err := grpc.Invoke(ctx, "/proto.RestoreService/shardRestore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RestoreService service

type RestoreServiceServer interface {
	ShardBackup(*ShardSnapshotRequest, RestoreService_ShardBackupServer) error
	ShardRestore(context.Context, *ShardRestoreRequest) (*ShardRestoreResponse, error)
}

func RegisterRestoreServiceServer(s *grpc.Server, srv RestoreServiceServer) {
	s.RegisterService(&_RestoreService_serviceDesc, srv)
}

func _RestoreService_ShardBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShardSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestoreServiceServer).ShardBackup(m, &restoreServiceShardBackupServer{stream})
}

type RestoreService_ShardBackupServer interface {
	Send(*ShardSnapshotResponse) error
	grpc.ServerStream
}

type restoreServiceShardBackupServer struct {
	grpc.ServerStream
}

func (x *restoreServiceShardBackupServer) Send(m *ShardSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RestoreService_ShardRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestoreServiceServer).ShardRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RestoreService/ShardRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestoreServiceServer).ShardRestore(ctx, req.(*ShardRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RestoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RestoreService",
	HandlerType: (*RestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shardRestore",
			Handler:    _RestoreService_ShardRestore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "shardBackup",
			Handler:       _RestoreService_ShardBackup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

func (m *ShardSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Database) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Database)))
		i += copy(dAtA[i:], m.Database)
	}
	if len(m.RetentionPolicy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.RetentionPolicy)))
		i += copy(dAtA[i:], m.RetentionPolicy)
	}
	if m.ShardID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ShardID))
	}
	if m.Since != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Since))
	}
	return i, nil
}

func (m *ShardSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileBlock) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.FileBlock)))
		i += copy(dAtA[i:], m.FileBlock)
	}
	return i, nil
}

func (m *ShardRestoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardRestoreRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Database) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Database)))
		i += copy(dAtA[i:], m.Database)
	}
	if len(m.RetentionPolicy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.RetentionPolicy)))
		i += copy(dAtA[i:], m.RetentionPolicy)
	}
	if m.ShardID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ShardID))
	}
	return i, nil
}

func (m *ShardRestoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardRestoreResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardSnapshotRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.RetentionPolicy)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovAdmin(uint64(m.ShardID))
	}
	if m.Since != 0 {
		n += 1 + sovAdmin(uint64(m.Since))
	}
	return n
}

func (m *ShardSnapshotResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileBlock)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func (m *ShardRestoreRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.RetentionPolicy)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovAdmin(uint64(m.ShardID))
	}
	return n
}

func (m *ShardRestoreResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileBlock", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileBlock = append(m.FileBlock[:0], dAtA[iNdEx:postIndex]...)
			if m.FileBlock == nil {
				m.FileBlock = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardRestoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardRestoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardRestoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardRestoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardRestoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardRestoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("admin.proto", fileDescriptorAdmin) }

var fileDescriptorAdmin = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x51, 0x5d, 0x4e, 0xc2, 0x40,
	0x10, 0x66, 0x05, 0x14, 0x06, 0xa2, 0x66, 0xc5, 0xa4, 0x29, 0xa4, 0x21, 0x7d, 0xea, 0x13, 0x31,
	0x1a, 0x2f, 0x40, 0x7c, 0xc1, 0xf8, 0x60, 0x96, 0x13, 0x2c, 0xcb, 0x28, 0x0d, 0xb0, 0x5b, 0x3b,
	0x5b, 0x13, 0xef, 0xe0, 0x01, 0xbc, 0x82, 0x37, 0xf1, 0xd1, 0x23, 0x18, 0xbc, 0x88, 0x61, 0x69,
	0x11, 0x49, 0x9f, 0x7d, 0xda, 0x7c, 0x33, 0xf3, 0xfd, 0xec, 0x0c, 0xb4, 0xe4, 0x74, 0x19, 0xeb,
	0x41, 0x92, 0x1a, 0x6b, 0x78, 0xdd, 0x3d, 0xe1, 0x2b, 0x83, 0xce, 0x78, 0x26, 0xd3, 0xe9, 0x58,
	0xcb, 0x84, 0x66, 0xc6, 0x0a, 0x7c, 0xca, 0x90, 0x2c, 0xf7, 0xa1, 0x31, 0x95, 0x56, 0x4e, 0x24,
	0xa1, 0xc7, 0xfa, 0x2c, 0x6a, 0x8a, 0x2d, 0xe6, 0x11, 0x9c, 0xa4, 0x68, 0x51, 0xdb, 0xd8, 0xe8,
	0x7b, 0xb3, 0x88, 0xd5, 0x8b, 0x77, 0xe0, 0x46, 0xf6, 0xcb, 0xdc, 0x83, 0x23, 0x5a, 0xab, 0x8f,
	0x6e, 0xbc, 0x6a, 0x9f, 0x45, 0x35, 0x51, 0x40, 0xde, 0x81, 0x3a, 0xc5, 0x5a, 0xa1, 0x57, 0xeb,
	0xb3, 0xa8, 0x2a, 0x36, 0x20, 0xbc, 0x86, 0xf3, 0xbd, 0x34, 0x94, 0x18, 0x4d, 0xc8, 0x7b, 0xd0,
	0x7c, 0x88, 0x17, 0x38, 0x5c, 0x18, 0x35, 0x77, 0x79, 0xda, 0xe2, 0xb7, 0x10, 0x66, 0x70, 0xe6,
	0x68, 0x02, 0xc9, 0x9a, 0x14, 0xff, 0xe9, 0x0f, 0xe1, 0x6d, 0xbe, 0xbb, 0xad, 0x6d, 0x1e, 0x76,
	0xcd, 0xc8, 0x94, 0x42, 0x22, 0x67, 0xdb, 0x10, 0x05, 0x5c, 0x77, 0x96, 0x48, 0x24, 0x1f, 0x31,
	0x77, 0x2b, 0xe0, 0xe5, 0x3b, 0x83, 0xe3, 0x5c, 0x67, 0x8c, 0xe9, 0x73, 0xac, 0x90, 0xdf, 0x41,
	0xcb, 0x39, 0x0d, 0xa5, 0x9a, 0x67, 0x09, 0xef, 0x6e, 0x2e, 0x37, 0x28, 0x3b, 0x97, 0xdf, 0x2b,
	0x6f, 0x6e, 0x02, 0x85, 0x95, 0x0b, 0xc6, 0x47, 0xd0, 0xa6, 0x9d, 0xb0, 0xdc, 0xdf, 0x65, 0xfc,
	0x5d, 0x9c, 0xdf, 0x2d, 0xed, 0x15, 0x62, 0xc3, 0xd3, 0x8f, 0x55, 0xc0, 0x3e, 0x57, 0x01, 0xfb,
	0x5a, 0x05, 0xec, 0xed, 0x3b, 0xa8, 0x4c, 0x0e, 0xdd, 0xfc, 0xd5, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0xa5, 0x29, 0x9a, 0x63, 0x02, 0x00, 0x00,
}
